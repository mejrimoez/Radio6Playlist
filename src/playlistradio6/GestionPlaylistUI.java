/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playlistradio6;

import CrudPanels.Chanson;
import CrudPanels.ChansonJpaController;
import CrudPanels.Chanteur;
import CrudPanels.ConfigurationServeur;
import CrudPanels.Genre;
import CrudPanels.GenreJpaController;
import CrudPanels.GestionChanteurs;
import CrudPanels.GestionGenres;
import CrudPanels.GestionPays;
import CrudPanels.GestionSymboles;
import CrudPanels.GestionThemes;
import CrudPanels.GestionUtilisateurs;
import CrudPanels.Pays;
import CrudPanels.Symbole;
import CrudPanels.Theme;
import FileSearch.FileSearch;
import FileSearch.PlaylistFileFilter;
import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
import java.awt.Cursor;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author moez
 */
public class GestionPlaylistUI extends javax.swing.JFrame {

    /**
     * Creates new form GestionPlaylistUI
     */
    public GestionPlaylistUI() {
        listeGenresAjout = new ArrayList<>();
        listeGenresModif = new ArrayList<>();
        listeFiltreGenres = new ArrayList<>();
        initComponents();
        currentChanson = null;
        ConfigurationServeur.isStartup = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager1 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("PersistanceUnit").createEntityManager();
        all_symbole_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT s FROM Symbole s");
        listSymboles = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(all_symbole_query.getResultList()));
        all_pays_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT p from Pays p");
        listPays = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(all_pays_query.getResultList()));
        all_theme_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT t FROM Theme t");
        listThemes = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(all_theme_query.getResultList()));
        all_chansons_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT chans FROM Chanson chans");
        listChansons = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(all_chansons_query.getResultList()));
        all_genre_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT g FROM Genre g");
        listGenres = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : all_genre_query.getResultList();
        fileOpen = new javax.swing.JFileChooser();
        fileSave = new javax.swing.JFileChooser();
        fileExport = new javax.swing.JFileChooser();
        all_chanteurs_query = java.beans.Beans.isDesignTime() ? null : entityManager1.createQuery("SELECT c FROM Chanteur c");
        listChanteurs = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList(all_chanteurs_query.getResultList()));
        ajoutTitre = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        nomChanson = new javax.swing.JTextField();
        symbole = new javax.swing.JComboBox();
        pays = new javax.swing.JComboBox();
        theme = new javax.swing.JComboBox();
        periode = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        rating = new StarRater();
        boutonAjouter = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        ajoutSymboleButton = new javax.swing.JButton();
        ajoutPaysButton = new javax.swing.JButton();
        ajoutThemeButton = new javax.swing.JButton();
        ajoutGenreButton = new javax.swing.JButton();
        nomChanteur = new javax.swing.JComboBox();
        ajoutChanteurButton = new javax.swing.JButton();
        ajoutGenres = new javax.swing.JButton();
        modifTitre = new javax.swing.JDialog();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        nomChanson1 = new javax.swing.JTextField();
        symbole1 = new javax.swing.JComboBox();
        pays1 = new javax.swing.JComboBox();
        theme1 = new javax.swing.JComboBox();
        periode1 = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();
        rating1 = new StarRater();
        boutonmodif = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();
        modifPaysButton = new javax.swing.JButton();
        modifSymboleButton = new javax.swing.JButton();
        modifThemeButton = new javax.swing.JButton();
        modifGenreButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        nomChanteur1 = new javax.swing.JComboBox();
        modifChanteurButton = new javax.swing.JButton();
        modifGenres = new javax.swing.JButton();
        progressBar1 = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        exportFrame = new javax.swing.JDialog();
        progressBar2 = new javax.swing.JProgressBar();
        jLabel14 = new javax.swing.JLabel();
        playlist =  org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList());
        radioButtonGroup = new javax.swing.ButtonGroup();
        menuGenresPlaylist = new javax.swing.JPopupMenu();
        menuGenresAjout = new javax.swing.JPopupMenu();
        listeFichiers = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new java.util.LinkedList<Chanson>());
        menuGenresModif = new javax.swing.JPopupMenu();
        waitDialog = new javax.swing.JDialog();
        jProgressBar1 = new javax.swing.JProgressBar();
        contenu = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        titresSansInfos = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        infosChans = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableChansons = new javax.swing.JTable();
        modifInfoChans = new javax.swing.JButton();
        contenu1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        chanteurCheckBox1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        listeChanteur1 = new javax.swing.JComboBox();
        paysCheckbox1 = new javax.swing.JCheckBox();
        listePays1 = new javax.swing.JComboBox();
        symboleCheckbox1 = new javax.swing.JCheckBox();
        listeSymbole1 = new javax.swing.JComboBox();
        themeCheckbox1 = new javax.swing.JCheckBox();
        listeTheme1 = new javax.swing.JComboBox();
        genreCheckbox1 = new javax.swing.JCheckBox();
        periodeCheckbox1 = new javax.swing.JCheckBox();
        periodeSpinner1 = new javax.swing.JSpinner();
        ratingCheckbox1 = new javax.swing.JCheckBox();
        ratingPanel1 = new StarRater();
        chansonCheckBox = new javax.swing.JCheckBox();
        chansonTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        automaticRadio = new javax.swing.JRadioButton();
        manualRadio = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        chansonsTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        playlistTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        selectSongButton = new javax.swing.JButton();
        deselectSongButton = new javax.swing.JButton();
        extractSongs = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFichier = new javax.swing.JMenu();
        newProjectItem = new javax.swing.JMenuItem();
        openFileItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        infoSongItem = new javax.swing.JMenuItem();
        saveFileItem = new javax.swing.JMenuItem();
        exportFilesItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        closeProjects = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        menuConfig = new javax.swing.JMenu();
        ConfigServeur = new javax.swing.JMenuItem();
        ConfigSymbole = new javax.swing.JMenuItem();
        ConfigGenre = new javax.swing.JMenuItem();
        ConfigPays = new javax.swing.JMenuItem();
        ConfigTheme = new javax.swing.JMenuItem();
        ConfigUtilisateurs = new javax.swing.JMenuItem();
        menuAide = new javax.swing.JMenu();
        AproposItem = new javax.swing.JMenuItem();

        fileOpen.setAcceptAllFileFilterUsed(false);
        fileOpen.setDialogTitle("Ouvrir une playlist");
        fileOpen.setFileFilter(new PlaylistFileFilter());

        fileSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileSave.setDialogTitle("Sauvegarder la playlist");
        fileSave.setFileFilter(new PlaylistFileFilter());

        fileExport.setAcceptAllFileFilterUsed(false);
        fileExport.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileExport.setDialogTitle("Exporter la playlist");
        fileExport.setFileFilter(new PlaylistFileFilter());
        fileExport.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        ajoutTitre.setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomFichier}"), ajoutTitre, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        ajoutTitre.addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                ajoutTitreWindowStateChanged(evt);
            }
        });

        jLabel1.setText("Nom chanson :");

        jLabel2.setText("Nom chanteur :");

        jLabel8.setText("Symbole :");
        jLabel8.setToolTipText("");

        jLabel9.setText("Pays :");
        jLabel9.setToolTipText("");

        jLabel10.setText("Thème :");
        jLabel10.setToolTipText("");

        jLabel11.setText("Période :");
        jLabel11.setToolTipText("");

        jLabel12.setText("Genre :");
        jLabel12.setToolTipText("");

        nomChanson.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomChanson}"), nomChanson, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        symbole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        symbole.setPreferredSize(new java.awt.Dimension(200, 20));

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listSymboles, symbole);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomSymbole}"), symbole, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        pays.setPreferredSize(new java.awt.Dimension(200, 20));

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listPays, pays);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomPays}"), pays, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        theme.setPreferredSize(new java.awt.Dimension(200, 20));

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listThemes, theme);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomTheme}"), theme, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        periode.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.periode}"), periode, org.jdesktop.beansbinding.BeanProperty.create("value"));
        binding.setSourceNullValue(new Integer(0)
        );
        binding.setSourceUnreadableValue(new Integer(0)
        );
        bindingGroup.addBinding(binding);

        jLabel13.setText("Classification :");
        jLabel13.setToolTipText("");

        javax.swing.GroupLayout ratingLayout = new javax.swing.GroupLayout(rating);
        rating.setLayout(ratingLayout);
        ratingLayout.setHorizontalGroup(
            ratingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        ratingLayout.setVerticalGroup(
            ratingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        boutonAjouter.setText("Ajouter");
        boutonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonAjouterActionPerformed(evt);
            }
        });

        cancelButton.setText("Annuler");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        ajoutSymboleButton.setText("+");
        ajoutSymboleButton.setFocusable(false);
        ajoutSymboleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutSymboleButtonActionPerformed(evt);
            }
        });

        ajoutPaysButton.setText("+");
        ajoutPaysButton.setFocusable(false);
        ajoutPaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutPaysButtonActionPerformed(evt);
            }
        });

        ajoutThemeButton.setText("+");
        ajoutThemeButton.setFocusable(false);
        ajoutThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutThemeButtonActionPerformed(evt);
            }
        });

        ajoutGenreButton.setText("+");
        ajoutGenreButton.setFocusable(false);
        ajoutGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutGenreButtonActionPerformed(evt);
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChanteurs, nomChanteur);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomChanteur}"), nomChanteur, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        ajoutChanteurButton.setText("+");
        ajoutChanteurButton.setFocusable(false);
        ajoutChanteurButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutChanteurButtonActionPerformed(evt);
            }
        });

        ajoutGenres.setText("Séléctionner genres");
        ajoutGenres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutGenresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ajoutTitreLayout = new javax.swing.GroupLayout(ajoutTitre.getContentPane());
        ajoutTitre.getContentPane().setLayout(ajoutTitreLayout);
        ajoutTitreLayout.setHorizontalGroup(
            ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajoutTitreLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(nomChanson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, 0)
                        .addComponent(nomChanteur, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(ajoutChanteurButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(60, 60, 60)
                        .addComponent(pays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(ajoutPaysButton))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(47, 47, 47)
                        .addComponent(theme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(ajoutThemeButton))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(7, 7, 7)
                        .addComponent(rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(37, 37, 37)
                        .addComponent(symbole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(ajoutSymboleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(41, 41, 41)
                        .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(periode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ajoutGenres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(ajoutGenreButton)))
                .addGap(9, 9, 9))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ajoutTitreLayout.createSequentialGroup()
                .addComponent(boutonAjouter)
                .addGap(106, 106, 106)
                .addComponent(cancelButton)
                .addGap(65, 65, 65))
        );
        ajoutTitreLayout.setVerticalGroup(
            ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajoutTitreLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(nomChanson, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2))
                    .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomChanteur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ajoutChanteurButton)))
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel8))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(symbole, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ajoutSymboleButton))))
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pays, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ajoutPaysButton))))
                .addGap(1, 1, 1)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10))
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(theme, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ajoutThemeButton))))
                .addGap(12, 12, 12)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutTitreLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel11))
                    .addComponent(periode, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ajoutGenres)
                    .addComponent(ajoutGenreButton))
                .addGap(18, 18, 18)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ajoutTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boutonAjouter)
                    .addComponent(cancelButton))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        modifTitre.setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomChanson}"), modifTitre, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        modifTitre.addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                modifTitreWindowStateChanged(evt);
            }
        });

        jLabel15.setText("Nom chanson :");

        jLabel16.setText("Nom chanteur :");

        jLabel17.setText("Symbole :");
        jLabel17.setToolTipText("");

        jLabel18.setText("Pays :");
        jLabel18.setToolTipText("");

        jLabel19.setText("Thème :");
        jLabel19.setToolTipText("");

        jLabel20.setText("Période :");
        jLabel20.setToolTipText("");

        jLabel21.setText("Genre :");
        jLabel21.setToolTipText("");

        nomChanson1.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomChanson}"), nomChanson1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        symbole1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        symbole1.setPreferredSize(new java.awt.Dimension(200, 20));

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listSymboles, symbole1);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomSymbole}"), symbole1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        pays1.setPreferredSize(new java.awt.Dimension(200, 20));

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listPays, pays1);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomPays}"), pays1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        theme1.setPreferredSize(new java.awt.Dimension(200, 20));

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listThemes, theme1);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomTheme}"), theme1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        periode1.setPreferredSize(new java.awt.Dimension(200, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.periode}"), periode1, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jLabel22.setText("Classification :");
        jLabel22.setToolTipText("");

        javax.swing.GroupLayout rating1Layout = new javax.swing.GroupLayout(rating1);
        rating1.setLayout(rating1Layout);
        rating1Layout.setHorizontalGroup(
            rating1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        rating1Layout.setVerticalGroup(
            rating1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        boutonmodif.setText("Modifier");
        boutonmodif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonmodifActionPerformed(evt);
            }
        });

        cancelButton1.setText("Annuler");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });

        modifPaysButton.setText("+");
        modifPaysButton.setFocusable(false);
        modifPaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifPaysButtonActionPerformed(evt);
            }
        });

        modifSymboleButton.setText("+");
        modifSymboleButton.setFocusable(false);
        modifSymboleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifSymboleButtonActionPerformed(evt);
            }
        });

        modifThemeButton.setText("+");
        modifThemeButton.setFocusable(false);
        modifThemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifThemeButtonActionPerformed(evt);
            }
        });

        modifGenreButton.setText("+");
        modifGenreButton.setFocusable(false);
        modifGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifGenreButtonActionPerformed(evt);
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChanteurs, nomChanteur1);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomChanteur}"), nomChanteur1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        modifChanteurButton.setText("+");
        modifChanteurButton.setFocusable(false);
        modifChanteurButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifChanteurButtonActionPerformed(evt);
            }
        });

        modifGenres.setText("Sélectionner Genres");
        modifGenres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifGenresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modifTitreLayout = new javax.swing.GroupLayout(modifTitre.getContentPane());
        modifTitre.getContentPane().setLayout(modifTitreLayout);
        modifTitreLayout.setHorizontalGroup(
            modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifTitreLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifTitreLayout.createSequentialGroup()
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifTitreLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(56, 56, 56))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifTitreLayout.createSequentialGroup()
                                .addComponent(boutonmodif)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(rating1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifTitreLayout.createSequentialGroup()
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addGap(49, 49, 49)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel23)
                            .addComponent(nomChanson1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(symbole1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nomChanteur1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifChanteurButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(modifSymboleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(modifTitreLayout.createSequentialGroup()
                            .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel21)
                                .addComponent(jLabel20)
                                .addComponent(jLabel18)
                                .addComponent(jLabel19))
                            .addGap(90, 90, 90)
                            .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(theme1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(periode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pays1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(modifGenres, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(modifPaysButton)
                                .addComponent(modifThemeButton)
                                .addComponent(modifGenreButton)))))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        modifTitreLayout.setVerticalGroup(
            modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifTitreLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancelButton1)
                    .addGroup(modifTitreLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifTitreLayout.createSequentialGroup()
                                .addComponent(nomChanson1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(nomChanteur1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modifChanteurButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(symbole1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(modifSymboleButton))
                                    .addComponent(jLabel17)))
                            .addComponent(jLabel15))
                        .addGap(18, 18, 18)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(pays1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modifPaysButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(theme1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(modifThemeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(periode1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(modifGenreButton)
                            .addComponent(modifGenres))
                        .addGap(18, 18, 18)
                        .addGroup(modifTitreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rating1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(modifTitreLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(21, 21, 21)
                                .addComponent(boutonmodif)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loadFrame.setTitle("Veuiller Patientier");
        loadFrame.setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());

        progressBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressBar1.setIndeterminate(true);

        jLabel7.setText("Importation de la liste des chansons. En cours... ");

        javax.swing.GroupLayout loadFrameLayout = new javax.swing.GroupLayout(loadFrame.getContentPane());
        loadFrame.getContentPane().setLayout(loadFrameLayout);
        loadFrameLayout.setHorizontalGroup(
            loadFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadFrameLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(loadFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(progressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        loadFrameLayout.setVerticalGroup(
            loadFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(progressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        exportFrame.setTitle("Veuiller Patientier");
        exportFrame.setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());

        progressBar2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        progressBar2.setIndeterminate(true);

        jLabel14.setText("Téléchargement de la liste des chansons. En cours... ");

        javax.swing.GroupLayout exportFrameLayout = new javax.swing.GroupLayout(exportFrame.getContentPane());
        exportFrame.getContentPane().setLayout(exportFrameLayout);
        exportFrameLayout.setHorizontalGroup(
            exportFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportFrameLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(progressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exportFrameLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(29, 29, 29))
        );
        exportFrameLayout.setVerticalGroup(
            exportFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exportFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(progressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        GenreJpaController genreJpaController = new GenreJpaController(javax.persistence.Persistence.createEntityManagerFactory("PersistanceUnit"));
        ItemListener itemListener = new ItemListener() {
            public void itemStateChanged(ItemEvent e)
            {
                if (e.getStateChange() == ItemEvent.SELECTED)
                {
                    listeFiltreGenres.add(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }
                if (e.getStateChange() == ItemEvent.DESELECTED)
                {
                    listeFiltreGenres.remove(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }

                refreshFilters();
                for (Genre s : listeFiltreGenres)
                System.out.println(s);
            }
        };
        for (Genre g : genreJpaController.findGenreEntities())
        {
            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(g.getNomGenre());
            item.addItemListener(itemListener);
            menuGenresPlaylist.add(item);
        }
        MenuScroller.setScrollerFor(menuGenresPlaylist, 5, 50, 0, 0);
        menuGenresPlaylist.setInvoker(jButton2);
        menuGenresPlaylist.setPreferredSize(new java.awt.Dimension(200, 150));

        GenreJpaController genreJpaController2 = new GenreJpaController(javax.persistence.Persistence.createEntityManagerFactory("PersistanceUnit"));
        ItemListener itemListener2 = new ItemListener(){
            public void itemStateChanged(ItemEvent e)
            {
                if (e.getStateChange() == ItemEvent.SELECTED)
                {
                    listeGenresAjout.add(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }
                if (e.getStateChange() == ItemEvent.DESELECTED)
                {
                    listeGenresAjout.remove(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }
                for (Genre s : listeGenresAjout)
                System.out.println(s);
            }
        };
        for (Genre g : genreJpaController2.findGenreEntities())
        {
            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(g.getNomGenre());
            item.addItemListener(itemListener2);
            menuGenresAjout.add(item);
        }
        MenuScroller.setScrollerFor(menuGenresAjout, 5, 50, 0, 0);
        menuGenresAjout.setInvoker(ajoutGenres);
        menuGenresAjout.setPreferredSize(new java.awt.Dimension(200, 150));

        listeGenresModif.clear();
        List<Genre> lg = new ArrayList<>();
        ItemListener itemListener3 = new ItemListener(){
            public void itemStateChanged(ItemEvent e)
            {
                if (e.getStateChange() == ItemEvent.SELECTED)
                {
                    listeGenresModif.add(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }
                if (e.getStateChange() == ItemEvent.DESELECTED)
                {
                    listeGenresModif.remove(new Genre(((StayOpenCheckBoxMenuItem)e.getItem()).getText()));
                }
                for (Genre s : listeGenresModif)
                System.out.println(s);
            }
        };
        if (tableChansons.getSelectedRow() != -1){
            Chanson modifChanson = (Chanson) listChansons.get(tableChansons.convertRowIndexToModel(tableChansons.getSelectedRow()));
            lg.addAll(modifChanson.getGenres());
        }
        for (Object g : listGenres)
        {
            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(((Genre)g).getNomGenre());
            item.addItemListener(itemListener3);
            if (lg.contains((Genre)g))
            {
                item.setSelected(true);
            }
            menuGenresModif.add(item);
        }
        MenuScroller.setScrollerFor(menuGenresModif, 5, 50, 0, 0);
        menuGenresModif.setInvoker(modifGenres);

        waitDialog.setAlwaysOnTop(true);
        waitDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        waitDialog.setType(java.awt.Window.Type.POPUP);

        jProgressBar1.setIndeterminate(true);

        javax.swing.GroupLayout waitDialogLayout = new javax.swing.GroupLayout(waitDialog.getContentPane());
        waitDialog.getContentPane().setLayout(waitDialogLayout);
        waitDialogLayout.setHorizontalGroup(
            waitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        waitDialogLayout.setVerticalGroup(
            waitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Radio 6 | playlists");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        contenu.setPreferredSize(new java.awt.Dimension(800, 558));
        contenu.setVisible(false);
        contenu.setEnabled(false);

        DefaultListModel<Chanson> model = new DefaultListModel<>();
        for (Object s : listeFichiers)
        model.addElement((Chanson)s);
        titresSansInfos.setModel(model);
        jScrollPane2.setViewportView(titresSansInfos);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 3, 14)); // NOI18N
        jLabel4.setText("Liste sans informations");

        infosChans.setText("Informations sur la chanson");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titresSansInfos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), infosChans, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        infosChans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infosChansActionPerformed(evt);
            }
        });

        tableChansons.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChansons, tableChansons);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numChanson}"));
        columnBinding.setColumnName("N°");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanson}"));
        columnBinding.setColumnName("Chanson");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanteur}"));
        columnBinding.setColumnName("Chanteur");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomPays}"));
        columnBinding.setColumnName("Pays");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomSymbole}"));
        columnBinding.setColumnName("Symbole");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${genres}"));
        columnBinding.setColumnName("Genres");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomTheme}"));
        columnBinding.setColumnName("Theme");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${periode}"));
        columnBinding.setColumnName("Période");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${classification}"));
        columnBinding.setColumnName("Classification");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(tableChansons);
        tableChansons.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tableChansons.getColumnModel().getColumnCount() > 0) {
            tableChansons.getColumnModel().getColumn(0).setResizable(false);
            tableChansons.getColumnModel().getColumn(0).setPreferredWidth(5);
            tableChansons.getColumnModel().getColumn(1).setMinWidth(180);
            tableChansons.getColumnModel().getColumn(1).setPreferredWidth(150);
            tableChansons.getColumnModel().getColumn(1).setMaxWidth(200);
            tableChansons.getColumnModel().getColumn(4).setMinWidth(80);
            tableChansons.getColumnModel().getColumn(4).setPreferredWidth(90);
            tableChansons.getColumnModel().getColumn(4).setMaxWidth(100);
            tableChansons.getColumnModel().getColumn(8).setCellRenderer(new renderer.StarsRenderer());
        }

        modifInfoChans.setText("Modifier la chanson");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, tableChansons, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), modifInfoChans, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        modifInfoChans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifInfoChansActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contenuLayout = new javax.swing.GroupLayout(contenu);
        contenu.setLayout(contenuLayout);
        contenuLayout.setHorizontalGroup(
            contenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenuLayout.createSequentialGroup()
                .addGroup(contenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contenuLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel4))
                    .addGroup(contenuLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(modifInfoChans)
                .addGap(473, 473, 473))
            .addGroup(contenuLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(infosChans)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contenuLayout.setVerticalGroup(
            contenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenuLayout.createSequentialGroup()
                .addGroup(contenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, contenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(modifInfoChans)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, contenuLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infosChans)
                .addGap(50, 50, 50))
        );

        contenu1.setPreferredSize(new java.awt.Dimension(800, 558));
        contenu1.setVisible(false);
        contenu1.setEnabled(false);

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setMinimumSize(new java.awt.Dimension(277, 343));
        jPanel5.setPreferredSize(new java.awt.Dimension(345, 252));

        chanteurCheckBox1.setText("Chanteur");
        chanteurCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chanteurCheckBox1ItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        jLabel6.setText("Critères de sélection :");

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChanteurs, listeChanteur1, "chanteur");
        bindingGroup.addBinding(jComboBoxBinding);

        listeChanteur1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listeChanteur1ItemStateChanged(evt);
            }
        });

        paysCheckbox1.setText("Pays");
        paysCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paysCheckbox1ItemStateChanged(evt);
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listPays, listePays1, "pays");
        bindingGroup.addBinding(jComboBoxBinding);

        listePays1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listePays1ItemStateChanged(evt);
            }
        });

        symboleCheckbox1.setText("Symbole");
        symboleCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                symboleCheckbox1ItemStateChanged(evt);
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listSymboles, listeSymbole1, "symbole");
        bindingGroup.addBinding(jComboBoxBinding);

        listeSymbole1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listeSymbole1ItemStateChanged(evt);
            }
        });

        themeCheckbox1.setText("Thème");
        themeCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                themeCheckbox1ItemStateChanged(evt);
            }
        });

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listThemes, listeTheme1, "theme");
        bindingGroup.addBinding(jComboBoxBinding);

        listeTheme1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listeTheme1ItemStateChanged(evt);
            }
        });
        listeTheme1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeTheme1ActionPerformed(evt);
            }
        });

        genreCheckbox1.setText("Genre");
        genreCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                genreCheckbox1ItemStateChanged(evt);
            }
        });

        periodeCheckbox1.setText("Période");
        periodeCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                periodeCheckbox1ItemStateChanged(evt);
            }
        });

        periodeSpinner1.setModel(new javax.swing.SpinnerNumberModel(2000, 1900, 9000, 5));
        periodeSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                periodeSpinner1StateChanged(evt);
            }
        });

        ratingCheckbox1.setText("Classement");
        ratingCheckbox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ratingCheckbox1ItemStateChanged(evt);
            }
        });

        ((StarRater)ratingPanel1).addStarListener(new StarRater.StarListener() {
            public void handleSelection(int selection)
            {
                //JOptionPane.showMessageDialog(null, "Selection "+selection);
                //     ratingCheckbox1.setSelected(true);
                refreshFilters();
            }
        });

        javax.swing.GroupLayout ratingPanel1Layout = new javax.swing.GroupLayout(ratingPanel1);
        ratingPanel1.setLayout(ratingPanel1Layout);
        ratingPanel1Layout.setHorizontalGroup(
            ratingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        ratingPanel1Layout.setVerticalGroup(
            ratingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        chansonCheckBox.setText("Chanson");
        chansonCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxItemChanged(evt);
            }
        });

        chansonTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                chansonTextFieldKeyReleased(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        jLabel24.setText("Mode de séléction :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 8, Short.MAX_VALUE)
                .addComponent(jLabel24))
        );

        jLabel25.setText("Durée du playlist (minutes) :");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, automaticRadio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jSpinner1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.setText("Choisir playlist Autmatiquement");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, automaticRadio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        radioButtonGroup.add(automaticRadio);
        automaticRadio.setText("Automatique");
        automaticRadio.setToolTipText("sélection automatique");

        radioButtonGroup.add(manualRadio);
        manualRadio.setSelected(true);
        manualRadio.setText("Manuelle");
        manualRadio.setToolTipText("sélection manuelle");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(automaticRadio)
                                    .addGap(28, 28, 28)
                                    .addComponent(manualRadio))))
                        .addGap(64, 82, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chanteurCheckBox1)
                                    .addComponent(paysCheckbox1)
                                    .addComponent(themeCheckbox1)
                                    .addComponent(symboleCheckbox1)
                                    .addComponent(genreCheckbox1)
                                    .addComponent(periodeCheckbox1)
                                    .addComponent(ratingCheckbox1)
                                    .addComponent(chansonCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(listeChanteur1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chansonTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(listePays1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listeSymbole1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(listeTheme1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(periodeSpinner1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ratingPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(22, 22, 22))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chansonCheckBox)
                    .addComponent(chansonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chanteurCheckBox1)
                    .addComponent(listeChanteur1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paysCheckbox1)
                    .addComponent(listePays1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(symboleCheckbox1)
                    .addComponent(listeSymbole1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(themeCheckbox1)
                    .addComponent(listeTheme1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreCheckbox1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodeCheckbox1)
                    .addComponent(periodeSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ratingCheckbox1)
                    .addComponent(ratingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manualRadio)
                    .addComponent(automaticRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        chansonsTable.setAutoCreateRowSorter(true);
        chansonsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listChansons, chansonsTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numChanson}"));
        columnBinding.setColumnName("N°");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanson}"));
        columnBinding.setColumnName("Chanson");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanteur}"));
        columnBinding.setColumnName("Chanteur");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomPays}"));
        columnBinding.setColumnName("Pays");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${genres}"));
        columnBinding.setColumnName("Genres");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomTheme}"));
        columnBinding.setColumnName("Theme");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomSymbole}"));
        columnBinding.setColumnName("Symbole");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${periode}"));
        columnBinding.setColumnName("Période");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${classification}"));
        columnBinding.setColumnName("Classification");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane4.setViewportView(chansonsTable);
        if (chansonsTable.getColumnModel().getColumnCount() > 0) {
            chansonsTable.getColumnModel().getColumn(0).setResizable(false);
            chansonsTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            chansonsTable.getColumnModel().getColumn(5).setResizable(false);
            chansonsTable.getColumnModel().getColumn(5).setPreferredWidth(20);
            chansonsTable.getColumnModel().getColumn(6).setResizable(false);
            chansonsTable.getColumnModel().getColumn(6).setPreferredWidth(10);
            chansonsTable.getColumnModel().getColumn(7).setResizable(false);
            chansonsTable.getColumnModel().getColumn(7).setPreferredWidth(10);
            chansonsTable.getColumnModel().getColumn(8).setCellRenderer(new renderer.StarsRenderer());
        }

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel3.setText("Tous les Chansons");

        jScrollPane5.setPreferredSize(new java.awt.Dimension(456, 206));

        playlistTable.setAutoCreateRowSorter(true);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, playlist, playlistTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numChanson}"));
        columnBinding.setColumnName("N°");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanson}"));
        columnBinding.setColumnName("Chanson");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomChanteur}"));
        columnBinding.setColumnName("Chanteur");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomPays}"));
        columnBinding.setColumnName("Pays");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${genres}"));
        columnBinding.setColumnName("Genres");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomTheme}"));
        columnBinding.setColumnName("Theme");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomSymbole}"));
        columnBinding.setColumnName("Symbole");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${periode}"));
        columnBinding.setColumnName("Période");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${longueur}"));
        columnBinding.setColumnName("Longueur");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${classification}"));
        columnBinding.setColumnName("Classisfication");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane5.setViewportView(playlistTable);
        if (playlistTable.getColumnModel().getColumnCount() > 0) {
            playlistTable.getColumnModel().getColumn(0).setResizable(false);
            playlistTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            playlistTable.getColumnModel().getColumn(5).setResizable(false);
            playlistTable.getColumnModel().getColumn(5).setPreferredWidth(20);
            playlistTable.getColumnModel().getColumn(6).setResizable(false);
            playlistTable.getColumnModel().getColumn(6).setPreferredWidth(10);
            playlistTable.getColumnModel().getColumn(7).setResizable(false);
            playlistTable.getColumnModel().getColumn(7).setPreferredWidth(30);
            playlistTable.getColumnModel().getColumn(8).setResizable(false);
            playlistTable.getColumnModel().getColumn(8).setPreferredWidth(10);
            playlistTable.getColumnModel().getColumn(9).setCellRenderer(new renderer.StarsRenderer());
        }
        playlistTable.getModel ()
        .addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e)
            {
                //        JOptionPane.showMessageDialog(null, e.getFirstRow());
                if(playlist.isEmpty())
                {
                    extractSongs.setEnabled(false);
                }else {
                    extractSongs.setEnabled(true);
                }

                editPlaylist = true;

            }
        }
    );

    jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
    jLabel5.setText("Playlist Sélectionné");

    selectSongButton.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
    selectSongButton.setText("↓");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, chansonsTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), selectSongButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    selectSongButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectSongButtonActionPerformed(evt);
        }
    });

    deselectSongButton.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
    deselectSongButton.setText("↑");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, playlistTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deselectSongButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    deselectSongButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deselectSongButtonActionPerformed(evt);
        }
    });

    extractSongs.setText("Extraire chansons vers un dossier");
    extractSongs.setEnabled(false);
    extractSongs.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            extractSongsActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout contenu1Layout = new javax.swing.GroupLayout(contenu1);
    contenu1.setLayout(contenu1Layout);
    contenu1Layout.setHorizontalGroup(
        contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(contenu1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenu1Layout.createSequentialGroup()
                    .addGroup(contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenu1Layout.createSequentialGroup()
                    .addGap(0, 186, Short.MAX_VALUE)
                    .addComponent(deselectSongButton)
                    .addGap(129, 129, 129)
                    .addComponent(jLabel5)
                    .addGap(100, 100, 100)
                    .addComponent(selectSongButton)
                    .addGap(314, 314, 314))
                .addGroup(contenu1Layout.createSequentialGroup()
                    .addGroup(contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contenu1Layout.createSequentialGroup()
                            .addGap(384, 384, 384)
                            .addComponent(jLabel3))
                        .addGroup(contenu1Layout.createSequentialGroup()
                            .addGap(355, 355, 355)
                            .addComponent(extractSongs)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );
    contenu1Layout.setVerticalGroup(
        contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(contenu1Layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contenu1Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(contenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectSongButton)
                        .addComponent(deselectSongButton)
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
            .addComponent(extractSongs)
            .addContainerGap())
    );

    menuFichier.setText("Fichier");

    newProjectItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newProjectItem.setText("Nouvelle Playlist...");
    newProjectItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newProjectItemActionPerformed(evt);
        }
    });
    menuFichier.add(newProjectItem);

    openFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    openFileItem.setText("Ouvrir Playlist...");
    openFileItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OpenActionPerformed(evt);
        }
    });
    menuFichier.add(openFileItem);
    menuFichier.add(jSeparator2);

    infoSongItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
    infoSongItem.setText("Entrer Informations sur les chansons");
    infoSongItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            infoSongItemActionPerformed(evt);
        }
    });
    menuFichier.add(infoSongItem);

    saveFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveFileItem.setText("Enregistrer Playlist");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contenu1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), saveFileItem, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    saveFileItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveFileItemActionPerformed(evt);
        }
    });
    menuFichier.add(saveFileItem);

    exportFilesItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
    exportFilesItem.setText("Exporter Playlist (vers Direct)");

    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, contenu1, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), exportFilesItem, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    exportFilesItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exportFilesItemActionPerformed(evt);
        }
    });
    menuFichier.add(exportFilesItem);
    menuFichier.add(jSeparator1);

    closeProjects.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
    closeProjects.setText("Fermer Tous les Projets");
    closeProjects.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeProjectsActionPerformed(evt);
        }
    });
    menuFichier.add(closeProjects);

    exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    exitItem.setText("Quitter");
    exitItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitItemActionPerformed(evt);
        }
    });
    menuFichier.add(exitItem);

    jMenuBar1.add(menuFichier);

    menuConfig.setText("Configuration");
    menuConfig.setToolTipText("");

    ConfigServeur.setText("Config, Serveur");
    ConfigServeur.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigServeurActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigServeur);

    ConfigSymbole.setText("Config. symboles");
    ConfigSymbole.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigSymboleActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigSymbole);

    ConfigGenre.setText("Config. genres");
    ConfigGenre.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigGenreActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigGenre);

    ConfigPays.setText("Config. pays");
    ConfigPays.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigPaysActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigPays);

    ConfigTheme.setText("Config. thème");
    ConfigTheme.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigThemeActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigTheme);

    ConfigUtilisateurs.setText("Config. utlilsateurs");
    ConfigUtilisateurs.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ConfigUtilisateursActionPerformed(evt);
        }
    });
    menuConfig.add(ConfigUtilisateurs);

    jMenuBar1.add(menuConfig);

    menuAide.setText("Aide");

    AproposItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
    AproposItem.setText("A propos");
    AproposItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AproposItemActionPerformed(evt);
        }
    });
    menuAide.add(AproposItem);

    jMenuBar1.add(menuAide);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(contenu, javax.swing.GroupLayout.DEFAULT_SIZE, 1317, Short.MAX_VALUE)
            .addGap(8, 8, 8))
        .addComponent(contenu1, javax.swing.GroupLayout.DEFAULT_SIZE, 1325, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(contenu, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(contenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(27, 27, 27))
    );

    bindingGroup.bind();

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AproposItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AproposItemActionPerformed
        AproposUI f = new AproposUI();
        f.setLocationRelativeTo(null);
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        f.pack();
        f.setVisible(true);

    }//GEN-LAST:event_AproposItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        if (editPlaylist) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }
        }
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void ConfigSymboleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigSymboleActionPerformed
        JFrame frame = new JFrame();
        frame.setContentPane(new GestionSymboles());
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigSymboleActionPerformed

    private void ConfigThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigThemeActionPerformed
        JFrame frame = new JFrame();
        frame.setContentPane(new GestionThemes());
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigThemeActionPerformed

    private void ConfigUtilisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigUtilisateursActionPerformed
        JFrame frame = new JFrame();
        frame.setContentPane(new GestionUtilisateurs());
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigUtilisateursActionPerformed

    private void ConfigPaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigPaysActionPerformed
        JFrame frame = new JFrame();
        frame.setContentPane(new GestionPays());
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigPaysActionPerformed

    private void ConfigGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigGenreActionPerformed
        JFrame frame = new JFrame();
        frame.setContentPane(new GestionGenres());
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigGenreActionPerformed

    private void ConfigServeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigServeurActionPerformed
        ConfigurationServeur frame = new ConfigurationServeur();
        frame.setLocationRelativeTo(this);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ConfigServeurActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed

        if (editPlaylist) {
            // afficher un message de confirmation de sauvegarde playlist
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }

        }

        int returnVal = fileOpen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileOpen.getSelectedFile();
            FileInputStream fis = null;

            contenu1.setVisible(true);
            contenu1.setEnabled(true);
            contenu.setVisible(false);
            contenu.setEnabled(false);

            try {
                List<Chanson> importedList = new ArrayList<>();

                fis = new FileInputStream(file);
                String s = "";
                int content;
                while ((content = fis.read()) != -1) {
                    s += (char) content;
                }
                StringTokenizer st = new StringTokenizer(s, ",");
                while (st.hasMoreElements()) {
                    String id = st.nextToken();
                    try {
                        int number = Integer.parseInt(id);
                        ChansonJpaController chansonJpaController = new ChansonJpaController(javax.persistence.Persistence.createEntityManagerFactory("PersistanceUnit"));
                        Chanson chanson = chansonJpaController.findChanson(number);
                        if (chanson != null) {
                            importedList.add(chanson);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                // initialize chanslist with importedlist
                playlist.clear();
                playlist.addAll(importedList);
                listChansons.removeAll(importedList);

                System.out.println("Susccess !!!");
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }

        } else {
            System.out.println("File access cancelled by user.");
        }

        editPlaylist = false;
    }//GEN-LAST:event_OpenActionPerformed

    private void saveFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileItemActionPerformed

        int returnVal = fileSave.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                String s = "";
                for (int i = 0; i < playlist.size(); i++) {
                    s += ((Chanson) playlist.get(i)).getNumChanson();
                    if (i < playlist.size() - 1) {
                        s += ",";
                    }
                }
                fw.write(s);
                System.out.println("Susccess !!!");
            } catch (Exception ex) {
                System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
            }
        } else {
            System.out.println("Création de Fichier annulée par l'utilisateur.");
        }
    }//GEN-LAST:event_saveFileItemActionPerformed

    private void infosChansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infosChansActionPerformed
        currentChanson = new Chanson();
        currentChanson.setNomFichier(((Chanson) titresSansInfos.getSelectedValue()).getNomFichier());
        currentChanson.setCheminFichier(((Chanson) titresSansInfos.getSelectedValue()).getCheminFichier());
        currentChanson.setLongueur(((Chanson) titresSansInfos.getSelectedValue()).getLongueur());
        ajoutTitre.setLocationRelativeTo(this);
        ajoutTitre.pack();
        ajoutTitre.setVisible(true);

    }//GEN-LAST:event_infosChansActionPerformed

    private void periodeSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_periodeSpinner1StateChanged
        refreshFilters();
    }//GEN-LAST:event_periodeSpinner1StateChanged

    // to refresh collections when changing configuration
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    public void refreshListChansonsBase() {
        // refresh song list
        java.util.Collection data = all_chansons_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listChansons.clear();
        listChansons.addAll(data);
    }

    public void refreshListChanteursBase() {
        // refresh chanteurs list
        java.util.Collection data = all_chanteurs_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listChanteurs.clear();
        listChanteurs.addAll(data);
    }

    public void refreshListGenresBase() {
        // refresh genre list
        java.util.Collection data = all_genre_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listGenres.clear();
        listGenres.addAll(data);
    }

    public void refreshListPaysBase() {
        // refresh pays list
        java.util.Collection data = all_pays_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listPays.clear();
        listPays.addAll(data);
    }

    public void refreshListThemesBase() {
        // refresh themes list
        java.util.Collection data = all_theme_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listThemes.clear();
        listThemes.addAll(data);
    }

    public void refreshListSymbolesBase() {
        // refresh symboles list
        java.util.Collection data = all_symbole_query.getResultList();
        for (Object entity : data) {
            entityManager1.refresh(entity);
        }
        listSymboles.clear();
        listSymboles.addAll(data);
    }

    public void refreshListGenresModif() {
        refreshListGenresBase();
        menuGenresModif = new JPopupMenu();
        for (Object g : listGenres) {
            listeGenresModif.clear();

            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(((Genre) g).getNomGenre());
            item.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        listeGenresModif.add(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                    if (e.getStateChange() == ItemEvent.DESELECTED) {
                        listeGenresModif.remove(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                }
            });
            menuGenresModif.add(item);
        }
    }

    public void refreshListGenresAjout() {
        refreshListGenresBase();
        menuGenresAjout = new JPopupMenu();
        for (Object g : listGenres) {
            listeGenresAjout.clear();

            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(((Genre) g).getNomGenre());
            item.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        listeGenresAjout.add(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                    if (e.getStateChange() == ItemEvent.DESELECTED) {
                        listeGenresAjout.remove(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                }
            });
            menuGenresAjout.add(item);
        }
    }

    public void refreshListGenresPlaylist() {
        refreshListGenresBase();
        menuGenresPlaylist = new JPopupMenu();
        for (Object g : listGenres) {
            listeFiltreGenres.clear();
            StayOpenCheckBoxMenuItem item = new StayOpenCheckBoxMenuItem(((Genre) g).getNomGenre());
            item.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        listeFiltreGenres.add(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                    if (e.getStateChange() == ItemEvent.DESELECTED) {
                        listeFiltreGenres.remove(new Genre(((StayOpenCheckBoxMenuItem) e.getItem()).getText()));
                    }
                    refreshFilters();
                }
            });
            menuGenresPlaylist.add(item);
        }
    }

    public void refreshAllBase() {
        refreshListChansonsBase();
        refreshListChanteursBase();
        refreshListGenresAjout();
        refreshListGenresModif();
        refreshListGenresPlaylist();
        refreshListPaysBase();
        refreshListSymbolesBase();
        refreshListThemesBase();
    }

    private void boutonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonAjouterActionPerformed
        entityManager1.getTransaction().begin();
        currentChanson.setNomChanson(nomChanson.getText());
        currentChanson.setNomChanteur(new Chanteur(String.valueOf(nomChanteur.getSelectedItem())));
        currentChanson.setGenres(listeGenresAjout);
        currentChanson.setNomPays(new Pays(String.valueOf(pays.getSelectedItem())));
        currentChanson.setNomSymbole(new Symbole(String.valueOf(symbole.getSelectedItem())));
        currentChanson.setNomTheme(new Theme(String.valueOf(theme.getSelectedItem())));
        currentChanson.setPeriode(Integer.parseInt(String.valueOf(periode.getValue())));
        currentChanson.setClassification(((StarRater) rating).getSelection());
        currentChanson.setLongueur(((Chanson) listeFichiers.get(titresSansInfos.getSelectedIndex())).getLongueur());
        entityManager1.persist(currentChanson);
        try {
            entityManager1.getTransaction().commit();
            listeGenresAjout.clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        // delete the current song from first list and persist it into database
        listeFichiers.remove(currentChanson);
        currentChanson = null;

        // refresh the song List
        waitDialog.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                refreshAllBase();

                return "success";
            }

            @Override
            protected void done() {
                waitDialog.setVisible(false);
            }

        };
        worker.addPropertyChangeListener(null);
        worker.execute();

        modifTitre.setVisible(false);

        ajoutTitre.setVisible(false);
    }//GEN-LAST:event_boutonAjouterActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ajoutTitre.setVisible(false);

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void ajoutSymboleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutSymboleButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionSymboles());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ajoutSymboleButtonActionPerformed

    private void ajoutPaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutPaysButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionPays());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ajoutPaysButtonActionPerformed

    private void ajoutThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutThemeButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionThemes());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ajoutThemeButtonActionPerformed

    private void ajoutGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutGenreButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionGenres());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ajoutGenreButtonActionPerformed

    private void boutonmodifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonmodifActionPerformed
        try {
            entityManager1.getTransaction().begin();
        } catch (Exception e) {
            e.printStackTrace();
        }
        int numChanson = ((Chanson) listChansons.get(tableChansons.convertRowIndexToModel(tableChansons.getSelectedRow()))).getNumChanson();
        currentChanson = entityManager1.find(Chanson.class, numChanson);
        currentChanson.setNomChanson(nomChanson1.getText());
        currentChanson.setNomChanteur(new Chanteur(String.valueOf(nomChanteur1.getSelectedItem())));
        currentChanson.setGenres(listeGenresModif);
        currentChanson.setNomPays(new Pays(String.valueOf(pays1.getSelectedItem())));
        currentChanson.setNomSymbole(new Symbole(String.valueOf(symbole1.getSelectedItem())));
        currentChanson.setNomTheme(new Theme(String.valueOf(theme1.getSelectedItem())));
        currentChanson.setPeriode(Integer.parseInt(String.valueOf(periode1.getValue())));
        currentChanson.setClassification(((StarRater) rating1).getSelection());
        entityManager1.merge(currentChanson);
        for (Genre g : listeGenresModif) {
            entityManager1.merge(g);
        }

        try {
            entityManager1.getTransaction().commit();
            listeGenresModif.clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        currentChanson = null;
        // refresh the song List
        waitDialog.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                refreshAllBase();

                return "success";
            }

            @Override
            protected void done() {
                waitDialog.setVisible(false);
            }

        };
        worker.addPropertyChangeListener(null);
        worker.execute();

        modifTitre.setVisible(false);
    }//GEN-LAST:event_boutonmodifActionPerformed

    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        currentChanson = null;
        modifTitre.setVisible(false);
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void modifSymboleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifSymboleButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionSymboles());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_modifSymboleButtonActionPerformed

    private void modifPaysButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifPaysButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionPays());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_modifPaysButtonActionPerformed

    private void modifThemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifThemeButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionThemes());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_modifThemeButtonActionPerformed

    private void modifGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifGenreButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionGenres());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_modifGenreButtonActionPerformed

    private void modifChanteurButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifChanteurButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionChanteurs());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_modifChanteurButtonActionPerformed

    private void modifInfoChansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifInfoChansActionPerformed
//        currentChanson = new Chanson();
        Chanson c = (Chanson) listChansons.get(tableChansons.convertRowIndexToModel(tableChansons.getSelectedRow()));
//        currentChanson.setNomFichier(c.getNomFichier());
//        currentChanson.setCheminFichier(c.getCheminFichier());
//        currentChanson.setClassification(c.getClassification());
        ((StarRater) rating1).setSelection(c.getClassification());
        modifTitre.setLocationRelativeTo(this);
        modifTitre.pack();
        modifTitre.setVisible(true);
    }//GEN-LAST:event_modifInfoChansActionPerformed

    private void infoSongItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoSongItemActionPerformed
        if (editPlaylist) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }
        }
        initSongs();
        contenu.setVisible(true);
        contenu1.setVisible(false);
        contenu1.setEnabled(false);
        contenu.setEnabled(true);

    }//GEN-LAST:event_infoSongItemActionPerformed

    private void newProjectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectItemActionPerformed
        if (editPlaylist) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }
        } else {
            contenu.setVisible(false);
            contenu1.setVisible(true);
            contenu.setEnabled(false);
            contenu1.setEnabled(true);
        }
    }//GEN-LAST:event_newProjectItemActionPerformed

    private void ajoutChanteurButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutChanteurButtonActionPerformed
        JDialog frame = new JDialog();
        frame.setContentPane(new GestionChanteurs());
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_ajoutChanteurButtonActionPerformed

    private void exportFilesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFilesItemActionPerformed
        if (editPlaylist) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }
        }

        int returnVal = fileExport.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            exportFrame.setLocationRelativeTo(null);
            exportFrame.setAlwaysOnTop(true);
            exportFrame.requestFocus();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            exportFrame.pack();
            setVisible(true);
            exportFrame.setVisible(true);
            final SwingWorker worker = new SwingWorker() {

                @Override
                protected Object doInBackground() {
                    try {
                        // iterate on the selected folder
                        // prepare date and time format
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy_HH:mm");
                        Date date = new Date();
                        String directoryName = fileExport.getSelectedFile().getAbsolutePath() + "/playlist_" + dateFormat.format(date);
                        // create a folder with date and time
                        File theDir = new File(directoryName);

                        // if the directory does not exist, create it
                        if (!theDir.exists()) {
                            System.out.println("creating directory: " + directoryName);
                            boolean result = false;

                            try {
                                theDir.mkdir();
                                result = true;
                            } catch (SecurityException se) {
                                JOptionPane.showMessageDialog(null, "Vous n'avez pas autorisé à créer le répertoire " + theDir.getName() + " !", "Erreur", JOptionPane.ERROR_MESSAGE);
                            }
                            if (result) {
                                System.out.println("DIR created");
                            }
                        }
                        // download all files mp3 and place it into folder
                        // TODO authentification for file download !!!!
                        for (Object c : playlist) {
                            String filepath = ((Chanson) c).getCheminFichier();
                            File source = new File(filepath);
                            File destination = new File(theDir.getAbsolutePath() + "/" + source.getName());
                            Files.copy(source.toPath(), destination.toPath());
                        }

                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("problem accessing file");
                        JOptionPane.showMessageDialog(null, "Problème d'exportation de fichiers !\n" + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
                    }
                    return "Success";
                }

                @Override
                protected void done() {
                    exportFrame.setVisible(false);
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    JOptionPane.showMessageDialog(null, "Téléchargement de chansons avec succès ...", "Succès", JOptionPane.INFORMATION_MESSAGE);
                }

            };
            worker.addPropertyChangeListener(null);
            worker.execute();
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_exportFilesItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (editPlaylist) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Voulez-vous sauvegarder la playlist en cours ?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // save the playlist file
                int returnVal = fileSave.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try (FileWriter fw = new FileWriter(fileSave.getSelectedFile() + ".playlist")) {
                        String s = "";
                        for (int i = 0; i < playlist.size(); i++) {
                            s += ((Chanson) playlist.get(i)).getNumChanson();
                            if (i < playlist.size() - 1) {
                                s += ",";
                            }
                        }
                        fw.write(s);
                        System.out.println("Susccess !!!");
                    } catch (Exception ex) {
                        System.out.println("Problème d'accès au fichier" + fileSave.getSelectedFile().getAbsolutePath());
                    }
                } else {
                    System.out.println("Création de Fichier annulée par l'utilisateur.");
                }
            } else if (dialogResult == JOptionPane.NO_OPTION) {
                editPlaylist = false;
            }
        }

        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void selectSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSongButtonActionPerformed
        Chanson source = (Chanson) listChansons.get(chansonsTable.convertRowIndexToModel(chansonsTable.getSelectedRow()));
        playlist.add(source);
        listChansons.remove(source);
    }//GEN-LAST:event_selectSongButtonActionPerformed

    private void closeProjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectsActionPerformed
        contenu.setVisible(false);
        contenu.setEnabled(false);
        contenu1.setVisible(false);
        contenu1.setEnabled(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(this.getToolkit().getScreenSize());
        validate();
        setVisible(true);
    }//GEN-LAST:event_closeProjectsActionPerformed

    private void listeTheme1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeTheme1ActionPerformed
//        themeCheckbox1.setSelected(true);
        refreshFilters();
    }//GEN-LAST:event_listeTheme1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final int longueur_demade = (Integer) jSpinner1.getValue() * 60;
        int long_courante = 0;
        List<Chanson> rejetList = new ArrayList<>();
        List<Chanson> tempsChansons = new ArrayList<>(listChansons);
        for (int i = 0; i < tempsChansons.size() && long_courante < longueur_demade; i++) {
            try {
                if (long_courante + tempsChansons.get(i).getLongueur() <= longueur_demade) {
                    long_courante += tempsChansons.get(i).getLongueur();
                    rejetList.add(tempsChansons.get(i));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (Chanson c : rejetList) {
            playlist.add(c);
            listChansons.remove(c);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        menuGenresPlaylist.show(jButton2, 0, jButton2.getHeight());
//        popupMenu.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ajoutGenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutGenresActionPerformed
        menuGenresAjout.show(ajoutGenres, 0, ajoutGenres.getHeight());
//        jPopupMenu1.setVisible(true);
    }//GEN-LAST:event_ajoutGenresActionPerformed

    private void modifGenresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifGenresActionPerformed
        menuGenresModif.show(modifGenres, 0, modifGenres.getHeight());
    }//GEN-LAST:event_modifGenresActionPerformed

    private void checkBoxItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxItemChanged
        refreshFilters();
    }//GEN-LAST:event_checkBoxItemChanged

    private void chanteurCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chanteurCheckBox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_chanteurCheckBox1ItemStateChanged

    private void paysCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paysCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_paysCheckbox1ItemStateChanged

    private void symboleCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_symboleCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_symboleCheckbox1ItemStateChanged

    private void themeCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_themeCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_themeCheckbox1ItemStateChanged

    private void genreCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_genreCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_genreCheckbox1ItemStateChanged

    private void periodeCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_periodeCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_periodeCheckbox1ItemStateChanged

    private void ratingCheckbox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ratingCheckbox1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_ratingCheckbox1ItemStateChanged

    private void chansonTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chansonTextFieldKeyReleased
        chansonCheckBox.setSelected(true);
        refreshFilters();
    }//GEN-LAST:event_chansonTextFieldKeyReleased

    private void listeChanteur1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listeChanteur1ItemStateChanged
        refreshFilters();

    }//GEN-LAST:event_listeChanteur1ItemStateChanged

    private void listePays1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listePays1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_listePays1ItemStateChanged

    private void listeSymbole1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listeSymbole1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_listeSymbole1ItemStateChanged

    private void listeTheme1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listeTheme1ItemStateChanged
        refreshFilters();
    }//GEN-LAST:event_listeTheme1ItemStateChanged

    private void deselectSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectSongButtonActionPerformed
        Chanson source = (Chanson) playlist.get(playlistTable.convertRowIndexToModel(playlistTable.getSelectedRow()));
        listChansons.add(source);
        playlist.remove(source);
    }//GEN-LAST:event_deselectSongButtonActionPerformed

    private void extractSongsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractSongsActionPerformed
        exportFilesItemActionPerformed(evt);
    }//GEN-LAST:event_extractSongsActionPerformed

    private void ajoutTitreWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_ajoutTitreWindowStateChanged
        waitDialog.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                refreshAllBase();

                return "success";
            }

            @Override
            protected void done() {
                waitDialog.setVisible(false);
            }

        };
        worker.addPropertyChangeListener(null);
        worker.execute();

        modifTitre.setVisible(false);
    }//GEN-LAST:event_ajoutTitreWindowStateChanged

    private void modifTitreWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_modifTitreWindowStateChanged
        waitDialog.setVisible(true);
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
                refreshAllBase();

                return "success";
            }

            @Override
            protected void done() {
                waitDialog.setVisible(false);
            }

        };
        worker.addPropertyChangeListener(null);
        worker.execute();

        modifTitre.setVisible(false);
    }//GEN-LAST:event_modifTitreWindowStateChanged

    public void initSongs() {
        // initialize music list
        Properties prop = new Properties();
        InputStream in = null;
        final String songPath;
        try {
            in = new FileInputStream("playlist.conf");
            // chargement de la configuration de serveur
            prop.load(in);

        } catch (Exception e) {
            ConfigurationServeur fen = new ConfigurationServeur();
            fen.setLocationRelativeTo(null);
            fen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            fen.pack();
            fen.setVisible(true);
        } finally {
            songPath = (in != null) ? prop.getProperty("music_folder") : "";
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        // doing a parse in the song directory
        loadFrame.setLocationRelativeTo(null);
        loadFrame.setAlwaysOnTop(true);
        loadFrame.requestFocus();
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        loadFrame.pack();
        setVisible(true);
        loadFrame.setVisible(true);
        SwingWorker worker = new SwingWorker() {
            @Override
            protected String doInBackground() throws Exception {
                // rechercher le dossier entré
                FileSearch fileSearch = new FileSearch();

                //try different directory and filename
                fileSearch.searchDirectory(new File(songPath));

                int count = fileSearch.getResult().size();
                if (count == 0) {
                    System.out.println("\nNo result found!");
                    JOptionPane.showMessageDialog(null, "Ce dossier ne contient aucune chanson !", "Pas de Chansons", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    System.out.println("\nFound " + count + " result!\n");

                    for (Chanson matched : fileSearch.getResult()) {
                        System.out.println(" " + matched.toString());
                    }
                    listeFichiers.addAll(fileSearch.getResult());
                }
                return "success!";
            }

            @Override

            protected void done() {
                loadFrame.setVisible(false);

                // refresh list of files
                DefaultListModel<Chanson> model = new DefaultListModel<>();
                for (Object s : listeFichiers) {
                    // eliminer les chansons deja configurés
                    if (!listChansons.contains((Chanson) s)) {
                        model.addElement((Chanson) s);
                    }
                }
                // refresh informations
                refreshAllBase();
                titresSansInfos.setModel(model);
                // reinitialize cursor
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            }

        };

        worker.addPropertyChangeListener(null);
        worker.execute();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new WindowsLookAndFeel());
        } catch (Exception e) {
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                GestionPlaylistUI fen = new GestionPlaylistUI();
                fen.setLocationRelativeTo(null);
                fen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                fen.setSize(fen.getToolkit().getScreenSize());
                fen.validate();
                fen.setVisible(true);

            }
        });
    }

    private List<RowFilter<Object, Object>> listeFilters;
    // filters
    private RowFilter nomChansonFilter;
    private RowFilter nomChanteurFilter;
    private RowFilter nomPaysFilter;
    private RowFilter nomSymboleFilter;
    private RowFilter nomThemeFilter;
    private RowFilter nomGenresFilter;
    private RowFilter periodeFilter;
    private RowFilter classementFilter;

    ////////////////////////////////////////////
    private final List<Genre> listeGenresAjout;
    private final List<Genre> listeGenresModif;
    private final List<Genre> listeFiltreGenres;
    private boolean editPlaylist = false;
    private Chanson currentChanson;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AproposItem;
    private javax.swing.JMenuItem ConfigGenre;
    private javax.swing.JMenuItem ConfigPays;
    private javax.swing.JMenuItem ConfigServeur;
    private javax.swing.JMenuItem ConfigSymbole;
    private javax.swing.JMenuItem ConfigTheme;
    private javax.swing.JMenuItem ConfigUtilisateurs;
    private javax.swing.JButton ajoutChanteurButton;
    private javax.swing.JButton ajoutGenreButton;
    private javax.swing.JButton ajoutGenres;
    private javax.swing.JButton ajoutPaysButton;
    private javax.swing.JButton ajoutSymboleButton;
    private javax.swing.JButton ajoutThemeButton;
    private javax.swing.JDialog ajoutTitre;
    private javax.persistence.Query all_chansons_query;
    private javax.persistence.Query all_chanteurs_query;
    private javax.persistence.Query all_genre_query;
    private javax.persistence.Query all_pays_query;
    private javax.persistence.Query all_symbole_query;
    private javax.persistence.Query all_theme_query;
    private javax.swing.JRadioButton automaticRadio;
    private javax.swing.JButton boutonAjouter;
    private javax.swing.JButton boutonmodif;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JCheckBox chansonCheckBox;
    private javax.swing.JTextField chansonTextField;
    private javax.swing.JTable chansonsTable;
    private javax.swing.JCheckBox chanteurCheckBox1;
    private javax.swing.JMenuItem closeProjects;
    private javax.swing.JPanel contenu;
    private javax.swing.JPanel contenu1;
    private javax.swing.JButton deselectSongButton;
    private javax.persistence.EntityManager entityManager1;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenuItem exportFilesItem;
    private javax.swing.JDialog exportFrame;
    private javax.swing.JButton extractSongs;
    private javax.swing.JFileChooser fileExport;
    private javax.swing.JFileChooser fileOpen;
    private javax.swing.JFileChooser fileSave;
    private javax.swing.JCheckBox genreCheckbox1;
    private javax.swing.JMenuItem infoSongItem;
    private javax.swing.JButton infosChans;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSpinner jSpinner1;
    private java.util.List listChansons;
    private java.util.List listChanteurs;
    private java.util.List listGenres;
    private java.util.List listPays;
    private java.util.List listSymboles;
    private java.util.List listThemes;
    private javax.swing.JComboBox listeChanteur1;
    private java.util.List listeFichiers;
    private javax.swing.JComboBox listePays1;
    private javax.swing.JComboBox listeSymbole1;
    private javax.swing.JComboBox listeTheme1;
    public static final javax.swing.JDialog loadFrame = new javax.swing.JDialog();
    private javax.swing.JRadioButton manualRadio;
    private javax.swing.JMenu menuAide;
    private javax.swing.JMenu menuConfig;
    private javax.swing.JMenu menuFichier;
    private javax.swing.JPopupMenu menuGenresAjout;
    private javax.swing.JPopupMenu menuGenresModif;
    private javax.swing.JPopupMenu menuGenresPlaylist;
    private javax.swing.JButton modifChanteurButton;
    private javax.swing.JButton modifGenreButton;
    private javax.swing.JButton modifGenres;
    private javax.swing.JButton modifInfoChans;
    private javax.swing.JButton modifPaysButton;
    private javax.swing.JButton modifSymboleButton;
    private javax.swing.JButton modifThemeButton;
    private javax.swing.JDialog modifTitre;
    private javax.swing.JMenuItem newProjectItem;
    private javax.swing.JTextField nomChanson;
    private javax.swing.JTextField nomChanson1;
    private javax.swing.JComboBox nomChanteur;
    private javax.swing.JComboBox nomChanteur1;
    private javax.swing.JMenuItem openFileItem;
    private javax.swing.JComboBox pays;
    private javax.swing.JComboBox pays1;
    private javax.swing.JCheckBox paysCheckbox1;
    private javax.swing.JSpinner periode;
    private javax.swing.JSpinner periode1;
    private javax.swing.JCheckBox periodeCheckbox1;
    private javax.swing.JSpinner periodeSpinner1;
    private java.util.List playlist;
    private javax.swing.JTable playlistTable;
    private javax.swing.JProgressBar progressBar1;
    private javax.swing.JProgressBar progressBar2;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JPanel rating;
    private javax.swing.JPanel rating1;
    private javax.swing.JCheckBox ratingCheckbox1;
    private javax.swing.JPanel ratingPanel1;
    private javax.swing.JMenuItem saveFileItem;
    private javax.swing.JButton selectSongButton;
    private javax.swing.JComboBox symbole;
    private javax.swing.JComboBox symbole1;
    private javax.swing.JCheckBox symboleCheckbox1;
    private javax.swing.JTable tableChansons;
    private javax.swing.JComboBox theme;
    private javax.swing.JComboBox theme1;
    private javax.swing.JCheckBox themeCheckbox1;
    private javax.swing.JList titresSansInfos;
    private javax.swing.JDialog waitDialog;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void refreshFilters() {
        listeFilters = null;
        try {
            nomChansonFilter = RowFilter.regexFilter("(?i)" + chansonTextField.getText(), 1);
            nomChanteurFilter = RowFilter.regexFilter(((Chanteur) listeChanteur1.getSelectedItem()).getNomChanteur(), 2);
            nomPaysFilter = RowFilter.regexFilter(((Pays) listePays1.getSelectedItem()).getNomPays(), 3);
            nomSymboleFilter = RowFilter.regexFilter("(?i)^" + ((Symbole) listeSymbole1.getSelectedItem()).getNomSymbole(), 6);
            nomThemeFilter = RowFilter.regexFilter(((Theme) listeTheme1.getSelectedItem()).getNomTheme(), 5);
            String string = "";
            for (int i = 0; i < listeFiltreGenres.size(); i++) {
                string += listeFiltreGenres.get(i).toString();
                if (i < listeFiltreGenres.size() - 1) {
                    string += "|";
                }
            }
            nomGenresFilter = RowFilter.regexFilter(string, 4);
            periodeFilter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Integer.parseInt(String.valueOf(periodeSpinner1.getValue())), 7);
            classementFilter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, ((StarRater) ratingPanel1).getSelection(), 8);

        } catch (Exception e) {
        }

        RowFilter<Object, Object> rowFilter = null;
        listeFilters = new ArrayList<>(8);
        if (chansonCheckBox.isSelected()) {
            listeFilters.add(nomChansonFilter);
        }
        if (chanteurCheckBox1.isSelected()) {
            listeFilters.add(nomChanteurFilter);
        }
        if (paysCheckbox1.isSelected()) {
            listeFilters.add(nomPaysFilter);
        }
        if (symboleCheckbox1.isSelected()) {
            listeFilters.add(nomSymboleFilter);
        }
        if (themeCheckbox1.isSelected()) {
            listeFilters.add(nomThemeFilter);
        }
        if (genreCheckbox1.isSelected()) {
            listeFilters.add(nomGenresFilter);
        }
        if (periodeCheckbox1.isSelected()) {
            listeFilters.add(periodeFilter);
        }
        if (ratingCheckbox1.isSelected()) {
            listeFilters.add(classementFilter);
        }
        try {
            rowFilter = RowFilter.andFilter(listeFilters);
        } catch (Exception e) {
            e.printStackTrace();
        }
        ((TableRowSorter) chansonsTable.getRowSorter()).setRowFilter(rowFilter);

    }

}

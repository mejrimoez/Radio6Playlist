/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CrudPanels;

import FileSearch.FileSearch;
import java.awt.Cursor;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import playlistradio6.GestionPlaylistUI;
import static playlistradio6.GestionPlaylistUI.loadFrame;

/**
 *
 * @author moez
 */
public class ConfigurationServeur extends javax.swing.JFrame {

    /**
     * Creates new form ConfigServeur
     */
    public ConfigurationServeur() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        repertoireServeur = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        musicPath = new javax.swing.JTextField();
        browseServ = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        repertoireServeur.setApproveButtonText("Ouvrir");
        repertoireServeur.setApproveButtonToolTipText("");
        repertoireServeur.setDialogTitle("Ouvrir Liste des chansons");
        repertoireServeur.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuration du serveur");
        setIconImage(new ImageIcon(getClass().getResource("/logofr.png")).getImage());
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLabel1.setText("Chemin de la source de chansons (serveur) :");

        musicPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                musicPathKeyTyped(evt);
            }
        });

        browseServ.setText("Parcourir");
        browseServ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseServActionPerformed(evt);
            }
        });

        cancelButton.setText("Config. par défaut");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.setEnabled(!musicPath.getText().equals("")
        );
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addGap(63, 63, 63)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(musicPath, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(browseServ)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(musicPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseServ))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseServActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseServActionPerformed
        int returnVal = repertoireServeur.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = repertoireServeur.getSelectedFile();
            try {
                musicPath.setText(file.getPath());
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browseServActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Properties properties = new Properties();
        OutputStream out = null;
        try {
            out = new FileOutputStream("playlist.conf");
            properties.setProperty("music_folder", musicPath.getText());

            properties.store(out, null);

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        this.setVisible(false);

        if (isStartup) {
            GestionPlaylistUI fen = new GestionPlaylistUI();
            fen.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            fen.setSize(fen.getToolkit().getScreenSize());
            fen.validate();
            fen.setVisible(true);
        } else {
            // TODO call init song to reload songs and update GUI

            final List<Chanson> listeFichiers = new ArrayList<>();

            // doing a parse in the song directory
            loadFrame.setLocationRelativeTo(null);
            loadFrame.setAlwaysOnTop(true);
            loadFrame.requestFocus();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            loadFrame.pack();
            setVisible(true);
            loadFrame.setVisible(true);
            SwingWorker worker = new SwingWorker() {
                @Override
                protected String doInBackground() throws Exception {
                    // rechercher le dossier entré
                    FileSearch fileSearch = new FileSearch();

                    //try different directory and filename
                    fileSearch.searchDirectory(new File(musicPath.getText()));

                    int count = fileSearch.getResult().size();
                    if (count == 0) {
                        System.out.println("\nNo result found!");
                        JOptionPane.showMessageDialog(null, "Ce dossier ne contient aucune chanson !", "Pas de Chansons", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        System.out.println("\nFound " + count + " result!\n");

                        for (Chanson matched : fileSearch.getResult()) {
                            System.out.println(" " + matched.toString());
                        }
                        listeFichiers.addAll(fileSearch.getResult());
                    }
                    return "success!";
                }

                @Override

                protected void done() {
                    loadFrame.setVisible(false);

//                    // refresh list
//                    model = new DefaultListModel<>();
//                    for (Chanson s : listeFichiers) {
//                        // eliminer les chansons deja configurés
//                        if (!listChansons.contains(s)) {
//                            model.addElement(s);
//                        }
//                    }
                    //titresSansInfos.setModel(model);
                    // reinitialize cursor
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

            };

            worker.addPropertyChangeListener(null);
            worker.execute();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        Properties properties = new Properties();
        OutputStream out = null;
        try {
            out = new FileOutputStream("playlist.conf");
            // TODO get the server adress property
            properties.setProperty("music_folder", "");

            properties.store(out, null);

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void musicPathKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_musicPathKeyTyped
        okButton.setEnabled(!musicPath.getText().equals(""));
    }//GEN-LAST:event_musicPathKeyTyped

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        okButton.setEnabled(!musicPath.getText().equals(""));
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ConfigurationServeur fen = new ConfigurationServeur();
                fen.setLocationRelativeTo(null);
                fen.setVisible(true);
            }
        });
    }

    public static DefaultListModel<Chanson> model;
    public static boolean isStartup = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseServ;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField musicPath;
    private javax.swing.JButton okButton;
    private javax.swing.JFileChooser repertoireServeur;
    // End of variables declaration//GEN-END:variables
}
